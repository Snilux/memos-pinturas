var app = require("../app");
var debug = require("debug")("memos-pinturas:server");
var http = require("http");
var socketIo = require("socket.io"); // Agregar Socket.io


var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

var server = http.createServer(app);
var io = socketIo(server, {
  cors: {
    origin: "*",
  },
});

io.on("connection", (socket) => {
  console.log(`INFO: Cliente conectado - ID: ${socket.id}`);

  socket.on("sendData", (data) => {
    // console.log(`EVENTO RECIBIDO 'sendData' de ${socket.id}:`, data);
    const eventNameToBrowser = "updatePosWithScannedData";
    io.emit(eventNameToBrowser, data);
    // console.log(
    //   ` reenviando como '${eventNameToBrowser}' a todos los clientes.`
    // );
  });

  socket.on("disconnect", () => {
    console.log(`INFO: Cliente desconectado - ID: ${socket.id}`);
  });
});

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// --- Tus funciones auxiliares ---
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  // Es útil añadir un console.log aquí también para confirmar que el servidor está listo
  console.log(
    "Servidor escuchando en " + bind + " y listo para conexiones WebSocket."
  );
}
